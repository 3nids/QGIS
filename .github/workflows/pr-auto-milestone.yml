name: Auto set milestone on PR

on:
  pull_request:
    types:
      - opened
      - reopened

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # obfuscate the github token so it can be used on jobs triggered from forks
      - name: Clear GH Token
        id: token
        uses: opengisch/clear-token@v1.0.12
        with:
          bot_token_encrypted: ddbdec32940df79f1adf2369b4b10f10b5a66f65
          bot_token_xor_key: a1b2c3d47311f8e29e204f85a81b4df4a44e252c

      # list the tags and milestones
      - uses: octokit/graphql-action@v2.x
        id: list_tags
        with:
          query: |
            query {
              repository(owner: "qgis", name: "QGIS") {
                refs(refPrefix: "refs/tags/", orderBy: {field: TAG_COMMIT_DATE, direction: DESC}, first: 30) {
                  edges {
                    node {
                      name
                    }
                  }
                }
                milestones(orderBy: {field: CREATED_AT, direction: DESC}, first: 30) {
                  edges {
                    node {
                      title
                      number
                    }
                  }
                }
              }
            }
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}

      # calculate the milestone and determine if it exists
      - name: Get the latest release
        id: calculate_milestone
        env:
          JSON_DATA: ${{ steps.list_branches.outputs.data }}
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
        run: |
          echo ${JSON_DATA}
          # master => NOTHING, release_3-10 => _10
          MINOR_VERSION=$(echo ${BASE_BRANCH} | sed -e 's/^release_[0-9]-([0-9]+)/_\1/;t;d')
          MAX_RELEASE=$(${JSON_DATA} | jq ".data.repository.refs.edges[].node.name | select( . | test(\"^final-3${MINOR_VERSION}\") ) | sub(\"^final-3_(?<m>[0-9]+)_(?<p>.)\"; .m+\".\"+.p) | tonumber" | jq -s '. | max')
          ((MILESTONE_TITLE=MAX_RELEASE+0.1))
          echo "::set-output name=milestone_title::${MILESTONE_TITLE}"
          MILESTONE_NUMBER=$(echo ${JSON_DATA} | jq ".data.repository.refs.edges[] | select( .node.name == \"${MILESTONE}\" ) | .node.number"
          echo "::set-output name=milestone_number::${MILESTONE_NUMBER}"
          [[ -n $(echo ${JSON_DATA} | jq ".data.repository.refs.edges[].node.name | select( . | test(\"^${MILESTONE}\") )") ]] && echo "::set-output name=milestone_exists::true" || echo "::set-output name=milestone_exists::false"

      # create the milestone if needed
      - name: Create milestone
        id: create_milestone
        if: !steps.calculate_milestone.outputs.milestone_exists
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/qgis/QGIS/milestones
          title: ${{ steps.calculate_milestone.outputs.milestone_title }}
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}

      - run: echo $DATA
        env:
          DATA: ${{ steps.create_milestone.outputs.data }}


      # update PR with milestone
      - name: update PR milestone
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          MILESTONE_NUMBER_EXISTING: ${{ steps.calculate_milestone.outputs.milestone_number}}
          MILESTONE_NUMBER_CREATED_JSON: ${{ steps.create_milestone.outputs.data }}
        with:
          route: PATCH /repos/qgis/QGIS/pulls/:pull_number
          pull_number: ${{ github.event.pull_request.number }}
          milestone:
